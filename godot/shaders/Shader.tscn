[gd_scene load_steps=5 format=1]

[ext_resource path="res://shaders/Shader.gd" type="Script" id=1]
[ext_resource path="res://demos/shaders/blackpixel.tex" type="Texture" id=2]

[sub_resource type="CanvasItemShader" id=1]

_code = {
"fragment": "// colors that will be used

uniform color color_1 = vec4(0.74, 0.41, 0.26, 1);
uniform color color_2 = vec4(0.65, 0.29, 0.2, 1);
uniform color color_3 = vec4(0.41, 0.19, 0.14, 1);
uniform color color_4 = vec4(0.29, 0.16, 0.13, 1);
uniform float n = 1;
 
//get pixel color from screen
color pixel_color = vec4(texscreen(SCREEN_UV),1);

vec4 to_grayscale(vec4 pixcol)
{
	float average = (pixcol.r + pixcol.g + pixcol.b)/3;
	return vec4(average, average, average, 1);
}

vec4 rms_color(vec4 color1, vec4 color2)
{
	return vec4(sqrt((color1.r*color1.r + color2.r*color2.r)/2), sqrt((color1.g*color1.g + color2.g*color2.g)/2), sqrt((color1.b*color1.b + color2.b*color2.b)/2), 1);
}

vec4 blend_multiply(vec4 color1, vec4 color2)
{
	return vec4(3*color1.r*color2.r, 3*color1.g*color2.g, 3*color1.b*color2.b, 1);
}

vec4 blend_screen(vec4 color1, vec4 color2)
{
	return vec4(1 - 1.5*(1-color1.r)*(1-color2.r), 1 - 1.5*(1-color1.g)*(1-color2.g), 1 - 2*(1-color1.b)*(1-color2.b), 1);
}

vec4 colorize(vec4 pixcol, vec4 grayscale)
{
	color new_color;
	if (grayscale.r >= 0)
	{
		//new_color = rms_color(color_4, pixcol);
		new_color = blend_multiply(color_2, pixcol);
		if (grayscale.r > 0.15)
		{
			new_color = blend_multiply(color_1, pixcol);
			if (grayscale.r > 0.3)
			{
				new_color = blend_screen(color_1, pixcol);
				if (grayscale.r > 0.5)
				{
					new_color = blend_screen(color_1, pixcol);
				}
			}
		}
	}
	new_color.a = n;
	return new_color;
}

//color grayscale
COLOR = colorize(pixel_color,to_grayscale(pixel_color));",
"fragment_ofs": 0,
"light": "",
"light_ofs": 0,
"vertex": "",
"vertex_ofs": 0
}

[sub_resource type="CanvasItemMaterial" id=2]

shader/shader = SubResource( 1 )
shader/shading_mode = 0
shader_param/color_1 = Color( 0.675781, 0.335148, 0.150467, 1 )
shader_param/color_2 = Color( 0.84375, 0.294262, 0.204346, 1 )
shader_param/color_3 = Color( 0.496094, 0.146551, 0.0658875, 1 )
shader_param/color_4 = Color( 0.441406, 0.117653, 0.10173, 1 )
shader_param/n = 0.5

[node name="Shaders" type="Node2D"]

script/script = ExtResource( 1 )

[node name="HeatShader" type="BackBufferCopy" parent="."]

copy_mode = 0
rect = Rect2( -100, -100, 200, 200 )

[node name="HeatFrame" type="TextureFrame" parent="HeatShader"]

material/material = SubResource( 2 )
focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = -800.0
margin/top = -360.0
margin/right = 800.0
margin/bottom = 360.0
texture = ExtResource( 2 )
stretch_mode = 2


